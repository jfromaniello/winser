#!/usr/bin/env node

var async = require('async');
var stdio = require('stdio');
var winser = require('../index')

var options = stdio.getopt({
    'version': {
        key: 'v',
        description: 'show winser version and exit'
    },
    'autostart': {
        key: 'a',
        description: 'start the application immediately after installation'
    },
    'install': {
        key: 'i',
        description: 'install the node application as a windows service'
    },
    'remove': {
        key: 'r',
        description: 'remove the windows service for the node application'
    },
    'stop': {
        key: 'x',
        description: 'stop the service before uninstalling'
    },
    'silent': {
        key: 's',
        description: 'supress any information in the console'
    },
    'confirmation': {
        key: 'c',
        description: 'ask for confirmation before installing/uninstalling'
    },
    'path': {
        key: 'p',
        args: 1,
        description: 'path to the node application you want to install as a service',
        default: winser._options.path
    },
    'name': {
        key: 'n',
        args: 1,
        description: 'name for service [default: name from package.json]'
    },
    'description': {
        key: 'd',
        args: 1,
        description: 'service description [default: description from package.json]'
    },
    'displayname': {
        args: 1,
        description: 'display name for service'
    },
    'startcmd': {
        args: 1,
        description: 'use this command for start service [default: scripts.start from package.json]'
    },
    'startuptype': {
        args: 1,
        description: 'set service startup type on boot (auto|manual|delayed|disabled)',
        default: "auto"
    },
    'env': {
        multiple: true,
        description: 'propogate environment variable'
    },
    'startwithnpm': {
        description: 'use "npm start" as a startcmd'
    },
    'set': {
        multiple: true,
        description: 'call nssm "set" command with arguments'
    }
}, 'winser [OPTION1] [OPTION2] ...');

if (options.version){
    console.log('winser v' + winser.version);
    return process.exit(0);
}

async.series([
    function(next) {
        if (!options.install && !options.remove){
            return next(new Error('Neither install nor remove options set.\nTry "--help" for more information.'));
        }

        next();
    },
    function(next) {
        winser.setSilent(options.silent);

        winser.getAppInfo({
            path: options.path,
            name: options.name
        }, function(error, appInfo) {
            var message;

            if (error) {
                return next(error);
            }

            if (!options.confirmation) {
                return next();
            }

            message = options.install ? 'continue installing "' + appInfo.name + '" as a service? ' :
                                            'continue uninstalling the "' + appInfo.name + '" service? ';

            stdio.question(message, ['y', 'n'], function(error, answer) {
                var errorToThrow;
                var errorMsg;

                if (answer === 'y'){
                    return next();
                }

                if (options.install) {
                    errorMsg = 'user canceled install';
                } else {
                    errorMsg = 'user canceled uninstall';
                }

                errorToThrow = new Error(errorMsg);
                errorToThrow.cleanExit = true;
                next(errorToThrow);
            });
        });
    },
    function(next) {
        if (options.install) {
            winser.install({
                path: options.path,
                name: options.name,
                displayname: options.displayname,
                description: options.description,
                startwithnpm: options.startwithnpm,
                startcmd: options.startcmd,
                startuptype: options.startuptype,
                env: options.env,
                set: options.set,
                autostart: options.autostart
            }, next);
        } else if (options.remove) {
            winser.remove({
                path: options.path,
                name: options.name,
                stop: options.stop
            }, next);
        } else {
            next();
        }
    },
], function(error) {
    if (error) {
        if (error.cleanExit) {
            return;
        }

        console.error(error);
        process.exit(1);
    }
});
